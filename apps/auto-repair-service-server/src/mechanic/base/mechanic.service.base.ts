/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Mechanic as PrismaMechanic,
  Appointment as PrismaAppointment,
} from "@prisma/client";

export class MechanicServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.MechanicCountArgs, "select">): Promise<number> {
    return this.prisma.mechanic.count(args);
  }

  async mechanics(
    args: Prisma.MechanicFindManyArgs
  ): Promise<PrismaMechanic[]> {
    return this.prisma.mechanic.findMany(args);
  }
  async mechanic(
    args: Prisma.MechanicFindUniqueArgs
  ): Promise<PrismaMechanic | null> {
    return this.prisma.mechanic.findUnique(args);
  }
  async createMechanic(
    args: Prisma.MechanicCreateArgs
  ): Promise<PrismaMechanic> {
    return this.prisma.mechanic.create(args);
  }
  async updateMechanic(
    args: Prisma.MechanicUpdateArgs
  ): Promise<PrismaMechanic> {
    return this.prisma.mechanic.update(args);
  }
  async deleteMechanic(
    args: Prisma.MechanicDeleteArgs
  ): Promise<PrismaMechanic> {
    return this.prisma.mechanic.delete(args);
  }

  async findAppointments(
    parentId: string,
    args: Prisma.AppointmentFindManyArgs
  ): Promise<PrismaAppointment[]> {
    return this.prisma.mechanic
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .appointments(args);
  }
}
